version: "3.8"

services:
  # üóÑÔ∏è MySQL Database
  mysql:
    image: mysql:8.0
    container_name: urlshortener-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: pass123
      MYSQL_DATABASE: urlshortener
      MYSQL_USER: urluser
      MYSQL_PASSWORD: urlpassword
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - urlshortener-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppass123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ‚ö° Redis Cache
  redis:
    image: redis:7-alpine
    container_name: urlshortener-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - urlshortener-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # üß† Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: urlshortener-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      DB_URL: jdbc:mysql://mysql:3306/urlshortener?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      DB_USERNAME: urluser
      DB_PASSWORD: urlpassword

      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379

      # HikariCP Connection Pool Configuration
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 20000
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 300000
      SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1200000

      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false

      # Application Configuration
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - urlshortener-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # üé® React Frontend (served via Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: urlshortener-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - urlshortener-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

# üåê Network Configuration
networks:
  urlshortener-network:
    driver: bridge

# üíæ Persistent Volumes
volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
